The matrix_mul function
======================

Using matrix_mul
-------------------

Importing the function:
	  >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Check function's docstring:
          >>> doc = __import__("100-matrix_mul").matrix_mul.__doc__
	  >>> len(doc) > 1
	  True

case 1 (m_a not a list):
	  >>> matrix_mul((1,2,3), [[1,2], [3,4]])
	  Traceback (most recent call last):
	  ...
	  TypeError: m_a must be a list

case 2 (m_b not a list):
       	  >>> matrix_mul([[1,2], [3,4]], "list")
	  Traceback (most recent call last):
          ...
          TypeError: m_b must be a list

case 3 (m_a not a list of lists):
          >>> matrix_mul([[1,2], [3,4], 45], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          TypeError: m_a must be a list of lists

case 4 (m_b not a list of lists):
          >>> matrix_mul([[1,2], [3,4]], [[1,2], [3,4], 45])
          Traceback (most recent call last):
          ...
          TypeError: m_b must be a list of lists

case 5 (m_a empty []):
          >>> matrix_mul([], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          ValueError: m_a can't be empty

case 6 (m_a empty [[]]):
          >>> matrix_mul([[]], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          ValueError: m_a can't be empty

case 7 (m_b empty []):
          >>> matrix_mul([[1,2], [3,4]], [])
          Traceback (most recent call last):
          ...
          ValueError: m_b can't be empty

case 8 (m_b empty [[]]):
          >>> matrix_mul([[1,2], [3,4]], [[]])
          Traceback (most recent call last):
          ...
          ValueError: m_b can't be empty

case 9 (m_a contains str):
          >>> matrix_mul([[1.5,2], [3,"hi"]], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          TypeError: m_a should contain only integers or floats

case 10 (m_b contains str):
          >>> matrix_mul([[1.5,2], [3,4]], [[1,2], [3,"hi"]])
          Traceback (most recent call last):
          ...
          TypeError: m_b should contain only integers or floats

case 11 (m_a rows diffrent size):
          >>> matrix_mul([[1.5, 2, 2.5], [3,4]], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          TypeError: each row of m_a must be of the same size

case 11 (m_a rows diffrent size):
          >>> matrix_mul([[1.5,2], [3,4]], [[1,2], [3,4, 5]])
          Traceback (most recent call last):
          ...
          TypeError: each row of m_b must be of the same size


case 12 (m_a width diffrent than m_b height ):
          >>> matrix_mul([[1.5,2], [3,4]], [[1,2], [3,4], [5,6]])
          Traceback (most recent call last):
          ...
          ValueError: m_a and m_b can't be multiplied

case 13 ([[1, 2], [3, 4]] x [[1, 2], [3, 4]]):
          >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	  [[7, 10], [15, 22]]

case 14 ([[1, 2]] x [[3, 4], [5, 6]]):
          >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
          [[13, 16]]
