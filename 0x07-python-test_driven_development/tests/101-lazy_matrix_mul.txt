The lazy_matrix_mul function
======================

Using lazy_matrix_mul
-------------------

Importing the function:
	  >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Check function's docstring:
          >>> doc = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
	  >>> len(doc) > 1
	  True

case 1 (m_a not a list):
	  >>> lazy_matrix_mul((1,2,3), [[1,2], [3,4]])
	  Traceback (most recent call last):
	  ...
	  ValueError: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)

case 2 (m_b not a list):
       	  >>> lazy_matrix_mul([[1,2], [3,4]], "list")
	  Traceback (most recent call last):
          ...
          ValueError: Scalar operands are not allowed, use '*' instead

case 3 (m_a not a list of lists):
          >>> lazy_matrix_mul([[1,2], [3,4], 45], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          ValueError: setting an array element with a sequence.

case 4 (m_b not a list of lists):
          >>> lazy_matrix_mul([[1,2], [3,4]], [[1,2], [3,4], 45])
          Traceback (most recent call last):
          ...
          ValueError: setting an array element with a sequence.

case 5 (m_a empty []):
          >>> lazy_matrix_mul([], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

case 6 (m_a empty [[]]):
          >>> lazy_matrix_mul([[]], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

case 7 (m_b empty []):
          >>> lazy_matrix_mul([[1,2], [3,4]], [])
          Traceback (most recent call last):
          ...
          ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

case 8 (m_b empty [[]]):
          >>> lazy_matrix_mul([[1,2], [3,4]], [[]])
          Traceback (most recent call last):
          ...
          ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

case 9 (m_a contains str):
          >>> lazy_matrix_mul([[1.5,2], [3,"hi"]], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          TypeError: invalid data type for einsum

case 10 (m_b contains str):
          >>> lazy_matrix_mul([[1.5,2], [3,4]], [[1,2], [3,"hi"]])
          Traceback (most recent call last):
          ...
          TypeError: invalid data type for einsum

case 11 (m_a rows diffrent size):
          >>> lazy_matrix_mul([[1.5, 2, 2.5], [3,4]], [[1,2], [3,4]])
          Traceback (most recent call last):
          ...
          ValueError: setting an array element with a sequence.

case 11 (m_a rows diffrent size):
          >>> lazy_matrix_mul([[1.5,2], [3,4]], [[1,2], [3,4, 5]])
          Traceback (most recent call last):
          ...
          ValueError: setting an array element with a sequence.


case 12 (m_a width diffrent than m_b height ):
          >>> lazy_matrix_mul([[1.5,2], [3,4]], [[1,2], [3,4], [5,6]])
          Traceback (most recent call last):
          ...
          ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

case 13 ([[1, 2], [3, 4]] x [[1, 2], [3, 4]]):
          >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	  array([[ 7, 10],
	  	 [15, 22]])

case 14 ([[1, 2]] x [[3, 4], [5, 6]]):
          >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
          array([[13, 16]])
